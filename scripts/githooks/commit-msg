#!/usr/bin/env bash
# git commit 代码规范
message=$(cat << EOF

# git commit message 规范

<type>[scope]: <subject>
// 空行
[body]
// 空行
[footer(s)]

## type (必须)
用于说明git commit的类别，只允许使用下面的标识。
  feat:     新功能（feature）。
  fix:      修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。
  docs:     文档（documentation）。
  style:    格式（不影响代码运行的变动）。
  refactor: 重构（即不是新增功能，也不是修改bug的代码变动）。例如简化代码，重命名变量，删除冗余代码等
  perf:     优化相关，比如提升性能、体验。比如更好的帮助信息，更好的错误提示，在保持向后兼容的情况下改变了配置文件格式
  test:     增加测试。
  chore:    构建过程或辅助工具的变动。
  revert:   回滚到上一个版本。
  merge:    代码合并。
  sync:     同步主线或分支的Bug。

## scope(可选)
  scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。
例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用*代替。

## subject(必须)
subject是commit目的的简短描述，不超过50个字符。

## body(可选)
Header 对 commit 做了高度概括，可以方便我们查看 Commit Message，Body 中说明了具体做了哪些变更。
Body 部分可以分成多行，而且格式也比较自由。此外，它还必须要包括修改的动机，以及和跟上一版本相比的改动点。

## footer(可选)
Footer 部分不是必选的，可以根据需要来选择，主要用来说明本次 commit 导致的后果。
在实际应用中，Footer 通常用来说明不兼容的改动和关闭的 Issue 列表

## 示例:

fix(): couple of unit tests for IE9

Older IEs serialize html uppercased, but IE9 does not...
Would be better to expect case insensitive, unfortunately jasmine does
not allow to user regexps for throw expectations.

Closes #392
Breaks foo.bar api, foo.baz should be used instead

"
EOF
)

RED='\033[00;31m'
YELLOW='\033[00;33m' # yellow color code
RESTORE='\033[0m'    # Text Reset means no color change

# 使用 gitlint 让 commit message 服从 conventional规范
# 必须在代码根目录存在.gitlint文件
go-gitlint --msg-file="$1"
ret=$?
if [ ! $ret -eq 0 ];then
  printf "${RED}错误git commit message格式}\n"
  printf "${RED}请遵循以下规范:\n"
  printf "${RESTORE}\n"
  echo "$message"
  exit $ret
fi
