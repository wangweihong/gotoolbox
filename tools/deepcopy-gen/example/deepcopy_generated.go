//go:build !ignore_autogenerated
// +build !ignore_autogenerated

package example

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Ttest) DeepCopyInto(out *Ttest) {
	*out = *in
	if in.I != nil {
		in, out := &in.I, &out.I
		*out = make([]Inner, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				(*out)[i] = (*in)[i].DeepCopyInner()
			}
		}
	}
	if in.MapByte != nil {
		in, out := &in.MapByte, &out.MapByte
		*out = make(map[string]byte, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapInt16 != nil {
		in, out := &in.MapInt16, &out.MapInt16
		*out = make(map[string]int16, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapInt32 != nil {
		in, out := &in.MapInt32, &out.MapInt32
		*out = make(map[string]int32, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapInt64 != nil {
		in, out := &in.MapInt64, &out.MapInt64
		*out = make(map[string]int64, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapUint8 != nil {
		in, out := &in.MapUint8, &out.MapUint8
		*out = make(map[string]byte, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapUint16 != nil {
		in, out := &in.MapUint16, &out.MapUint16
		*out = make(map[string]uint16, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapUint32 != nil {
		in, out := &in.MapUint32, &out.MapUint32
		*out = make(map[string]uint32, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapUint64 != nil {
		in, out := &in.MapUint64, &out.MapUint64
		*out = make(map[string]uint64, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapFloat32 != nil {
		in, out := &in.MapFloat32, &out.MapFloat32
		*out = make(map[string]float32, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapFloat64 != nil {
		in, out := &in.MapFloat64, &out.MapFloat64
		*out = make(map[string]float64, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapString != nil {
		in, out := &in.MapString, &out.MapString
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MapStringPtr != nil {
		in, out := &in.MapStringPtr, &out.MapStringPtr
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MapStringPtrPtr != nil {
		in, out := &in.MapStringPtrPtr, &out.MapStringPtrPtr
		*out = make(map[string]**string, len(*in))
		for key, val := range *in {
			var outVal **string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(*string)
				if **in != nil {
					in, out := *in, *out
					*out = new(string)
					**out = **in
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.MapMap != nil {
		in, out := &in.MapMap, &out.MapMap
		*out = make(map[string]map[string]string, len(*in))
		for key, val := range *in {
			var outVal map[string]string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make(map[string]string, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.MapMapPtr != nil {
		in, out := &in.MapMapPtr, &out.MapMapPtr
		*out = make(map[string]*map[string]string, len(*in))
		for key, val := range *in {
			var outVal *map[string]string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(map[string]string)
				if **in != nil {
					in, out := *in, *out
					*out = make(map[string]string, len(*in))
					for key, val := range *in {
						(*out)[key] = val
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.MapSlice != nil {
		in, out := &in.MapSlice, &out.MapSlice
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.MapSlicePtr != nil {
		in, out := &in.MapSlicePtr, &out.MapSlicePtr
		*out = make(map[string]*[]string, len(*in))
		for key, val := range *in {
			var outVal *[]string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new([]string)
				if **in != nil {
					in, out := *in, *out
					*out = make([]string, len(*in))
					copy(*out, *in)
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.MapStruct != nil {
		in, out := &in.MapStruct, &out.MapStruct
		*out = make(map[string]Ttest, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.MapStructPtr != nil {
		in, out := &in.MapStructPtr, &out.MapStructPtr
		*out = make(map[string]*Ttest, len(*in))
		for key, val := range *in {
			var outVal *Ttest
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(Ttest)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.PointerBuiltin != nil {
		in, out := &in.PointerBuiltin, &out.PointerBuiltin
		*out = new(string)
		**out = **in
	}
	if in.PointerPtr != nil {
		in, out := &in.PointerPtr, &out.PointerPtr
		*out = new(*string)
		if **in != nil {
			in, out := *in, *out
			*out = new(string)
			**out = **in
		}
	}
	if in.PointerMap != nil {
		in, out := &in.PointerMap, &out.PointerMap
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.PointerSlice != nil {
		in, out := &in.PointerSlice, &out.PointerSlice
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.PointerMapPtr != nil {
		in, out := &in.PointerMapPtr, &out.PointerMapPtr
		*out = new(*map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = new(map[string]string)
			if **in != nil {
				in, out := *in, *out
				*out = make(map[string]string, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
		}
	}
	if in.PointerSlicePtr != nil {
		in, out := &in.PointerSlicePtr, &out.PointerSlicePtr
		*out = new(*[]string)
		if **in != nil {
			in, out := *in, *out
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.PointerStruct != nil {
		in, out := &in.PointerStruct, &out.PointerStruct
		*out = new(Ttest)
		(*in).DeepCopyInto(*out)
	}
	if in.PointerStructPtr != nil {
		in, out := &in.PointerStructPtr, &out.PointerStructPtr
		*out = new(*Ttest)
		if **in != nil {
			in, out := *in, *out
			*out = new(Ttest)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.SliceByte != nil {
		in, out := &in.SliceByte, &out.SliceByte
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	if in.SliceInt16 != nil {
		in, out := &in.SliceInt16, &out.SliceInt16
		*out = make([]int16, len(*in))
		copy(*out, *in)
	}
	if in.SliceInt32 != nil {
		in, out := &in.SliceInt32, &out.SliceInt32
		*out = make([]int32, len(*in))
		copy(*out, *in)
	}
	if in.SliceInt64 != nil {
		in, out := &in.SliceInt64, &out.SliceInt64
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	if in.SliceUint8 != nil {
		in, out := &in.SliceUint8, &out.SliceUint8
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	if in.SliceUint16 != nil {
		in, out := &in.SliceUint16, &out.SliceUint16
		*out = make([]uint16, len(*in))
		copy(*out, *in)
	}
	if in.SliceUint32 != nil {
		in, out := &in.SliceUint32, &out.SliceUint32
		*out = make([]uint32, len(*in))
		copy(*out, *in)
	}
	if in.SliceUint64 != nil {
		in, out := &in.SliceUint64, &out.SliceUint64
		*out = make([]uint64, len(*in))
		copy(*out, *in)
	}
	if in.SliceFloat32 != nil {
		in, out := &in.SliceFloat32, &out.SliceFloat32
		*out = make([]float32, len(*in))
		copy(*out, *in)
	}
	if in.SliceFloat64 != nil {
		in, out := &in.SliceFloat64, &out.SliceFloat64
		*out = make([]float64, len(*in))
		copy(*out, *in)
	}
	if in.SliceString != nil {
		in, out := &in.SliceString, &out.SliceString
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SliceStringPtr != nil {
		in, out := &in.SliceStringPtr, &out.SliceStringPtr
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SliceStringPtrPtr != nil {
		in, out := &in.SliceStringPtrPtr, &out.SliceStringPtrPtr
		*out = make([]**string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(*string)
				if **in != nil {
					in, out := *in, *out
					*out = new(string)
					**out = **in
				}
			}
		}
	}
	if in.SliceMap != nil {
		in, out := &in.SliceMap, &out.SliceMap
		*out = make([]map[string]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make(map[string]string, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
		}
	}
	if in.SliceMapPtr != nil {
		in, out := &in.SliceMapPtr, &out.SliceMapPtr
		*out = make([]*map[string]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(map[string]string)
				if **in != nil {
					in, out := *in, *out
					*out = make(map[string]string, len(*in))
					for key, val := range *in {
						(*out)[key] = val
					}
				}
			}
		}
	}
	if in.SliceSlice != nil {
		in, out := &in.SliceSlice, &out.SliceSlice
		*out = make([][]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.SliceSlicePtr != nil {
		in, out := &in.SliceSlicePtr, &out.SliceSlicePtr
		*out = make([]*[]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new([]string)
				if **in != nil {
					in, out := *in, *out
					*out = make([]string, len(*in))
					copy(*out, *in)
				}
			}
		}
	}
	if in.SliceStruct != nil {
		in, out := &in.SliceStruct, &out.SliceStruct
		*out = make([]Ttest, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SliceStructPtr != nil {
		in, out := &in.SliceStructPtr, &out.SliceStructPtr
		*out = make([]*Ttest, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Ttest)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Ttest.
func (in *Ttest) DeepCopy() *Ttest {
	if in == nil {
		return nil
	}
	out := new(Ttest)
	in.DeepCopyInto(out)
	return out
}
