package govar_gen

//// Usage is a replacement usage function for the flags package.
//func Usage() {
//	fmt.Fprintf(os.Stderr, "Usage of govar-gen:\n")
//	fmt.Fprintf(os.Stderr, "\tgovar-gen [flags] -type T [directory]\n")
//	fmt.Fprintf(os.Stderr, "\tgovar-gen [flags] -type T files... # Must be a single package\n")
//	fmt.Fprintf(os.Stderr, "Flags:\n")
//	flag.PrintDefaults()
//}
//
//func main() {
//	log.SetFlags(0)
//	log.SetPrefix("codegen: ")
//	flag.Usage = Usage
//	flag.Parse()
//	if len(*typeNames) == 0 {
//		flag.Usage()
//		os.Exit(2)
//	}
//	types := strings.Split(*typeNames, ",")
//	var tags []string
//	if len(*buildTags) > 0 {
//		tags = strings.Split(*buildTags, ",")
//	}
//
//	// We accept either one directory or a list of files. Which do we have?
//	args := flag.Args()
//	if len(args) == 0 {
//		// Default: process whole package in current directory.
//		args = []string{"."}
//	}
//
//	// Parse the package once.
//	var dir string
//	g := Generator{
//		trimPrefix: *trimprefix,
//	}
//	// TODO(suzmue): accept other patterns for packages (directories, list of files, import paths, etc).
//	if len(args) == 1 && isDirectory(args[0]) {
//		dir = args[0]
//	} else {
//		if len(tags) != 0 {
//			log.Fatal("-tags option applies only to directories, not when files are specified")
//		}
//		dir = filepath.Dir(args[0])
//	}
//
//	g.parsePackage(args, tags)
//
//	if !*doc {
//		// Print the header and package clause.
//		g.Printf("// Code generated by \"codegen %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
//		g.Printf("\n")
//		g.Printf("package %s", g.pkg.name)
//		g.Printf("\n")
//	}
//
//	// Run generate for each type.
//	var src []byte
//	for _, typeName := range types {
//		if *doc {
//			g.generateDocs(typeName)
//			src = g.buf.Bytes()
//		} else {
//			g.generate(typeName)
//			// Format the output.
//			src = g.format()
//		}
//	}
//
//	// Write to file.
//	outputName := *output
//	if outputName == "" {
//		absDir, _ := filepath.Abs(dir)
//		baseName := fmt.Sprintf("%s_generated.go", strings.ReplaceAll(filepath.Base(absDir), "-", "_"))
//		if len(flag.Args()) == 1 {
//			baseName = fmt.Sprintf(
//				"%s_generated.go",
//				strings.ReplaceAll(filepath.Base(strings.TrimSuffix(flag.Args()[0], ".go")), "-", "_"),
//			)
//		}
//
//		outputName = filepath.Join(dir, strings.ToLower(baseName))
//	}
//	err := ioutil.WriteFile(outputName, src, 0o600)
//	if err != nil {
//		log.Fatalf("writing output: %s", err)
//	}
//}
